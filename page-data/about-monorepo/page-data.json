{"componentChunkName":"component---src-templates-blog-post-js","path":"/about-monorepo/","result":{"data":{"site":{"siteMetadata":{"title":"MINJI'S PLAYGROUND"}},"markdownRemark":{"id":"af02d02e-8d50-5c07-b6f3-43b1c43cfb19","excerpt":"…","html":"<p>나는 현재 마이크로레포로 회사에서 프로젝트를 관리하고 있다.<br/>\n프론트 개발자가 적고 프로젝트의 갯수는 많다.<br/>\n그 중에서도 같은 모듈로 여러 프로젝트에 쓰이는 경우가 많고<br/>\n해당 모듈이 업데이트 될때마다 각 프로젝트에 수정을 넣어줘야 하기에<br/>\n모노레포라는 것에 관심을 두게 되었다.</p>\n<p>일단 모노레포를 직접 구성해보면서 이해해보기로 했다.</p>\n<h3>모노레포는 어떻게 프로젝트들을 관리하는가?</h3>\n<h5>apps<br/></h5>\n<p>┣ app1<br/>\n┗ app2</p>\n<h5>packages<br/></h5>\n<p>┗ ui<br/>\n┗ ts-config<br/>\n┗ eslint-config<br/></p>\n<br/>\napps 는 나의 프로젝트들이 들어있는 폴더이고 <br/>packages는 내가 저 apps 안의 프로젝트들에서<br/> 사용할 수 있는\npackage 들을 모아둔 폴더이다.<br/><br/>\n나는 npm 혹은 yarn 을 이용해 패키지를 설치해 사용하는 것처럼<br/>\n저 packages 안에 공통모듈 혹은 공통설정들을 두고 사용할 수 있는 것이다.<br/>\n<br/><br/>\n이런식으로 해당 패키지의 이름을 설정해주고 <br/>\npackages/ui/package.json <br/><br/>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\"name\": \"@repo/ui\",\n\"version\": \"1.0.0\",\n\"description\": \"\",\n\"main\": \"index.js\",</code></pre></div>\n<p>프로젝트 안에서 디펜던시 안에 해당 패키지를 추가해준다. <br/>\napps/app1/package.json<br/>\n<br/></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\"devDependencies\": {\n   \"@repo/ui\": \"workspace:*\",\n   \"@repo/eslint\": \"workspace:*\",\n   \"typescript\": \"^5\",\n   \"@types/node\": \"^20\",\n   \"@types/react\": \"^18\",\n   \"@types/react-dom\": \"^18\",\n   \"eslint\": \"^8\",\n   \"eslint-config-next\": \"14.2.4\"\n}</code></pre></div>\n<p>이는 내가 공통적으로 가져가고 싶은 것 들을 (eslint, config, style, ui .. 등)<br/>\n레포안의 패키지로 만들어 공유하는 시스템이다. <br/> <br/>\n각각의 패키지 폴더안은 pnpm init 을 하여\npackage.json 을 생성해주었다.\n<br/> 이는 각각의 패키지가 독립적으로 버전관리가 가능하다.<br/>\n다만 유의해야 할 점은 공통의 패키지이기 때문에 수정점이 해당 패키지를 사용하는 모든 프로젝트에 미칠 영향을 고려해야 된다는 것이다.<br/><br/>\n이는 때로 장점이 될 수도 단점이 될 수도 있기 때문에.<br/>프로젝트의 리스크를 잘 고려해가며 작업해야겠다.</p>\n<h3>turbo를 선택한 이유?</h3>\n<p><a href=\"https://en.wikipedia.org/wiki/Salted_duck_egg\">salted duck eggs</a>.</p>\n<p><img src=\"./salty_egg.jpg\" alt=\"Chinese Salty Egg\"></p>\n<h6></h6>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> - good) setState('gimbab')\n - nono) this.state = 'gimbab' or state = 'gimbab'</code></pre></div>\n<p><code class=\"language-text\">pnpm init</code></p>\n<div class=\"gatsby-highlight\" data-language=\"markdown\"><pre class=\"language-markdown\"><code class=\"language-markdown\"><span class=\"token list punctuation\">-</span> Red\n<span class=\"token list punctuation\">-</span> Green\n<span class=\"token list punctuation\">-</span> Blue\n\n<span class=\"token list punctuation\">*</span> Red\n<span class=\"token list punctuation\">*</span> Green\n<span class=\"token list punctuation\">*</span> Blue\n\n<span class=\"token list punctuation\">-</span> Red\n<span class=\"token list punctuation\">-</span> Green\n<span class=\"token list punctuation\">-</span> Blue</code></pre></div>\n<ul>\n<li><code class=\"language-text\">code goes</code> here in this line</li>\n<li><strong>bold</strong> goes here</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"markdown\"><pre class=\"language-markdown\"><code class=\"language-markdown\">-<span class=\"token code-snippet code keyword\">`pnpm init`</span> here in this line\n\n<span class=\"token list punctuation\">-</span> <span class=\"token bold\"><span class=\"token punctuation\">**</span><span class=\"token content\">bold</span><span class=\"token punctuation\">**</span></span> goes here</code></pre></div>\n<p>pnpm init</p>\n<p><a href=\"https://velog.io/@jma1020/turborepo-pnpm-%EB%AA%A8%EB%85%B8%EB%A0%88%ED%8F%AC-%EC%82%AC%EC%9A%A9%EA%B8%B0-%EC%84%A4%EC%A0%95\">https://velog.io/@jma1020/turborepo-pnpm-%EB%AA%A8%EB%85%B8%EB%A0%88%ED%8F%AC-%EC%82%AC%EC%9A%A9%EA%B8%B0-%EC%84%A4%EC%A0%95</a>\n이런 모노레포를 형성시킬 수 있는 패키지 중 대표적으로 turborepo 존재합니다.\n해당 turborepo 사이트에서도 설명해주지만, 큰 특징 9개를 나열해보겠습니다.</p>\n<ol>\n<li>\n<p>Incremental builds\n작업 진행을 캐싱해 이미 계산된 내용은 건너 뛰는 것을 의미합니다. 빌드는 딱 한 번만 하는 것을 목표로 합니다.</p>\n</li>\n<li>\n<p>Content-aware hasing\n타임스탬프가 아닌 콘텐츠를 인식하는 방식으로 해싱을 지원합니다. 이를 통해 모든 파일을 다시 빌드하는 것이 아니라 변경된 파일만 빌드합니다.</p>\n</li>\n<li>\n<p>Cloud caching\n클라우드 빌드 캐시를 팀원 및 CI/CD와 공유합니다. 이를 통해 로컬 환경을 넘어 클라우드 환경에서도 빠른 빌드를 제공합니다.</p>\n</li>\n<li>\n<p>Parallel execution\n모든 코어를 사용하는 병렬 실행을 목표로 합니다. 지정된 태스크 단위로 의존성을 판단해 최대한 병렬적으로 작업을 진행합니다.</p>\n</li>\n<li>\n<p>Task Pipelines\n태스크 간의 연결을 정의해서 빌드를 언제 어떻게 실행할지 판단해 최적화합니다.</p>\n</li>\n<li>\n<p>Zero Runtime Overhead\n런타임 코드와 소스 맵을 다루지 않기 때문에 런타임 단계에서 파악하지 못한 리스크가 불거질 위험이 없습니다.</p>\n</li>\n<li>\n<p>Pruned subsets\n빌드에 필요한 요소만으로 모노 레포의 하위 집합을 생성해 PaaS 배포 속도를 높입니다.</p>\n</li>\n<li>\n<p>JSON configuration\n별도의 코드 작업 없이 JSON 설정으로 터보를 사용할 수 있습니다.\n// turbo.json { “baseBranch”: “origin/main”, “pipeline”: { “build”: { … } } }</p>\n</li>\n<li>\n<p>Profile in browser\n빌드 프로필로 빌드 과정을 시각화하면 병목 지점을 쉽게 찾을 수 있습니다.</p>\n</li>\n</ol>\n<ul>\n<li>pnpm init</li>\n<li>apps 폴더와 packages 폴더 만들기</li>\n<li>yaml 파일</li>\n<li>turbo 설치</li>\n<li>apps/ my-app</li>\n<li>pnpm init &#x26;pnpx create-next-app@latest 설치</li>\n</ul>\n<p>루트 디펜던시 pnpm install [dependency name] -w (root에 실수로 dependecy를 추가하는 것을 방지하기 위해서)</p>\n<p>완료된거</p>\n<ol>\n<li>pnpm 설치</li>\n<li>폴더구조 구성</li>\n<li>pnpm yaml 파일 생성</li>\n<li>next 플젝 추가</li>\n<li>터보설치</li>\n</ol>\n<p>해야될거</p>\n<ul>\n<li>\n<p>eslint 설치 굿 !!!</p>\n</li>\n<li>\n<p>lock.yaml 파일이 그런 지도같은 역할?</p>\n</li>\n<li>\n<p>index.js 에서 각종 설정을 한 후에</p>\n</li>\n<li>\n<p>packagejson 에 필요한 패키지들을 추가한 후에\nname을 경로로 쓰일 이름으로 지정 그 이름을 가지고 이제\napps 에서 패키지로 쓸 수 있다\n해당 프로젝트에 devdependcies 에 “@repo/eslint”: “workspace:*”,\n요렇게 추가를 해주고 pnpm install 하면 노드모듈에 들어온다</p>\n</li>\n</ul>\n<p><a href=\"https://velog.io/@yoosion030/PNPM%EC%9C%BC%EB%A1%9C-%EB%AA%A8%EB%85%B8%EB%A0%88%ED%8F%AC-%EA%B5%AC%EC%B6%95%ED%95%98%EA%B8%B0\">https://velog.io/@yoosion030/PNPM%EC%9C%BC%EB%A1%9C-%EB%AA%A8%EB%85%B8%EB%A0%88%ED%8F%AC-%EA%B5%AC%EC%B6%95%ED%95%98%EA%B8%B0</a></p>\n<ul>\n<li>\n<p>tsconfig 설정</p>\n</li>\n<li>\n<p>ui 공유해보기\nUI ESLINT 설정, 터보gen 설정</p>\n</li>\n<li>\n<p>터보 제네레이터 설치?</p>\n</li>\n<li>\n<p>프리티어 설정</p>\n</li>\n</ul>","frontmatter":{"title":"모노레포의 효율성 (pnpm + turbo)","date":"April 06, 2024","description":"모노레포를 직접 구성해보며 느낀점"}},"previous":{"fields":{"slug":"/about-ssr/"},"frontmatter":{"title":"Isomorphic"}},"next":{"fields":{"slug":"/about-cypress/"},"frontmatter":{"title":"매일 아침 신규상장건 E2E 테스트 하기 with slack api"}}},"pageContext":{"id":"af02d02e-8d50-5c07-b6f3-43b1c43cfb19","previousPostId":"9d87104d-4363-55fd-b7ec-e477aeb8a378","nextPostId":"74e9c19f-a40d-5ff7-abf3-07ce11458ade"}},"staticQueryHashes":["2841359383","3257411868"]}